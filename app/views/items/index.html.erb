<h1 class="text-center">Checklist de Itens</h1>
<p class="text-center">Bem-vindo, <%= current_user.email %>!</p>

<div class="header-actions">
  <%= link_to "Adicionar Item", new_item_path, class: "btn btn-add" %>
</div>

<div class="search-container">
  <input type="text" id="item-search-input" placeholder="Buscar item por nome..." class="form-control">
</div>

<% @items.group_by(&:category).each do |category, items_by_category| %>
  <div class="group-wrapper" data-category-name="<%= category.downcase %>">
    <div class="group-header category-header collapsible">
      <% not_found_in_category = items_by_category.count { |item| !@found_item_ids.include?(item.id) } %>
      <span>
        <%= category %> <%= items_by_category.count %>
        <% if not_found_in_category > 0 %>
          <span class="not-found-count colorred">(<%= not_found_in_category %>)</span>
        <% end %>
      </span>
      <span class="toggle-icon"></span>
    </div>
    <div class="items-container">
      <% items_by_category.group_by(&:rarity).each do |rarity, items_by_rarity| %>
        <div class="group-wrapper" data-rarity-name="<%= rarity.downcase %>">
          <div class="group-header rarity-header collapsible">
            <% not_found_in_rarity = items_by_rarity.count { |item| !@found_item_ids.include?(item.id) } %>
            <span>
              <%= rarity %> <%= items_by_rarity.count %>
              <% if not_found_in_rarity > 0 %>
                <span class="not-found-count colorred">(<%= not_found_in_rarity %>)</span>
              <% end %>
            </span>
            <span class="toggle-icon"></span>
          </div>
          <div class="items-container">
            <table class="items-table">
              <thead>
                <tr>
                  <th>Item</th>
                  <th style="width: 10%;"></th>
                  <th style="width: 10%;"></th>
                </tr>
              </thead>
              <tbody>
                <% items_by_rarity.each do |item| %>
                  <% is_found = @found_item_ids.include?(item.id) %>
                  <tr id="item-row-<%= item.id %>" data-item-name="<%= item.name.downcase %>" class="<%= is_found ? 'row-found' : 'row-missing' %>">
                    <td><%= item.name %></td>
                    <td>
                      <%= form_with(url: toggle_found_item_path(item), method: :post, local: true) do %>
                        <button type="submit" class="btn-action <%= is_found ? 'btn-not-found' : 'btn-found' %>">
                          <%= image_tag(
                                is_found ? 'https://img.icons8.com/external-others-inmotus-design/67/FFFFFF/external-Cancel-basic-elements-others-inmotus-design.png' : 'https://img.icons8.com/ios-filled/50/FFFFFF/instagram-check-mark.png',
                                alt: is_found ? "Marcar como não encontrado" : "Marcar como encontrado",
                                width: "24"
                              ) %>
                        </button>
                      <% end %>
                    </td>
                    <td>
                      <%= form_with(url: item_path(item), method: :delete, local: true) do %>
                        <button type="submit" class="btn btn-delete">
                          <%= image_tag "https://img.icons8.com/comic/200/FFFFFF/delete.png", alt: "Remover Item", width: "24" %>
                        </button>
                      <% end %>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        </div>
      <% end %>
    </div>
  </div>
<% end %>

<script>

(function() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

  function restoreScrollPosition() {
    const scrolledItemId = sessionStorage.getItem('scroll-to-item-id');
    if (scrolledItemId) {
      requestAnimationFrame(() => {
        setTimeout(() => {
          const element = document.getElementById(scrolledItemId);
          if (element) {
            // Safari iOS não aceita "instant"
            if (isSafari && isIOS) {
              // iPhone 7 Safari specific fix
              const rect = element.getBoundingClientRect();
              const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
              window.scrollTo(0, rect.top + scrollTop - 100);
            } else {
              element.scrollIntoView({ behavior: 'auto', block: 'center' });
            }
          }
          sessionStorage.removeItem('scroll-to-item-id');
        }, isIOS ? 500 : 100); // no iOS dar mais tempo ajuda
      });
    }
  }

  function setupCollapsibles() {
    document.querySelectorAll('.collapsible').forEach(header => {
      if (header.dataset.listenerAttached === 'true') return;
      header.dataset.listenerAttached = 'true';

      const container = header.nextElementSibling;

      // Ensure initial state is properly set
      if (header.classList.contains('collapsed')) {
        container.style.maxHeight = '0px';
        container.style.overflow = 'hidden';
      } else {
        container.style.maxHeight = container.scrollHeight + "px";
      }

      function toggleCollapse(event) {
        event.preventDefault(); // ajuda no Safari iOS
        
        // Add small delay for iPhone 7 Safari
        setTimeout(() => {
          const isCollapsed = header.classList.toggle('collapsed');
          const content = header.nextElementSibling;
          content.classList.toggle('collapsed', isCollapsed);

          // iPhone 7 Safari specific handling
          if (isSafari && isIOS) {
            if (isCollapsed) {
              content.style.maxHeight = '0px';
              content.style.overflow = 'hidden';
            } else {
              // Force reflow for iPhone 7 Safari
              content.style.maxHeight = 'none';
              content.offsetHeight; // Trigger reflow
              content.style.maxHeight = content.scrollHeight + "px";
              content.style.overflow = 'visible';
            }
          } else {
            // Standard behavior for other browsers
            if (isCollapsed) {
              content.style.maxHeight = '0px';
            } else {
              content.style.maxHeight = content.scrollHeight + "px";
            }
          }

          setTimeout(() => {
            const parentContainer = header.closest('.items-container:not(.collapsed)');
            if (parentContainer) {
              // iPhone 7 Safari specific handling
              if (isSafari && isIOS) {
                parentContainer.style.maxHeight = 'none';
                parentContainer.offsetHeight; // Trigger reflow
                parentContainer.style.maxHeight = parentContainer.scrollHeight + "px";
              } else {
                parentContainer.style.maxHeight = parentContainer.scrollHeight + "px";
              }
            }
          }, 300);
        }, isIOS ? 50 : 0); // Small delay for iOS devices
      }

      // click normal (desktop + Android)
      header.addEventListener('click', toggleCollapse);
      // suporte ao tap no iOS
      header.addEventListener('touchend', toggleCollapse);
    });
  }

  function setupSearchFilter() {
    const searchInput = document.getElementById('item-search-input');
    // Previne múltiplos listeners em re-renderizações do Turbo
    if (!searchInput || searchInput.dataset.searchAttached) {
      return;
    }
    searchInput.dataset.searchAttached = 'true';

    function filterItems() {
      const searchTerm = this.value.toLowerCase().trim();

      // Filtra itens individuais
      document.querySelectorAll('tr[data-item-name]').forEach(row => {
        const itemName = row.dataset.itemName.toLowerCase();
        const isVisible = searchTerm === '' || itemName.includes(searchTerm);
        row.style.display = isVisible ? '' : 'none';
      });

      // Filtra grupos por raridade
      document.querySelectorAll('.group-wrapper[data-rarity-name]').forEach(rarityGroup => {
        const visibleItems = rarityGroup.querySelectorAll('tr[data-item-name]:not([style*="display: none"])').length;
        const isVisible = searchTerm === '' || visibleItems > 0;
        rarityGroup.style.display = isVisible ? '' : 'none';

        if (isVisible && searchTerm !== '') {
          const header = rarityGroup.querySelector('.rarity-header');
          const container = header.nextElementSibling;
          if (header.classList.contains('collapsed')) {
            header.classList.remove('collapsed');
            // iPhone 7 Safari specific handling
            if (isSafari && isIOS) {
              container.style.maxHeight = 'none';
              container.offsetHeight; // Trigger reflow
              container.style.maxHeight = container.scrollHeight + "px";
            } else {
              container.style.maxHeight = container.scrollHeight + "px";
            }
          }
        }
      });

      // Filtra grupos por categoria
      document.querySelectorAll('.group-wrapper[data-category-name]').forEach(categoryGroup => {
        const visibleRarities = categoryGroup.querySelectorAll('.group-wrapper[data-rarity-name]:not([style*="display: none"])').length;
        const isVisible = searchTerm === '' || visibleRarities > 0;
        categoryGroup.style.display = isVisible ? '' : 'none';

        if (isVisible && searchTerm !== '') {
          const header = categoryGroup.querySelector('.category-header');
          const container = header.nextElementSibling;
          if (header.classList.contains('collapsed')) {
            header.classList.remove('collapsed');
            // iPhone 7 Safari specific handling
            if (isSafari && isIOS) {
              container.style.maxHeight = 'none';
              container.offsetHeight; // Trigger reflow
              container.style.maxHeight = container.scrollHeight + "px";
            } else {
              container.style.maxHeight = container.scrollHeight + "px";
            }
          }
        }
      });
    }

    // Safari iOS pode falhar só com "input", então adicionamos "keyup"
    searchInput.addEventListener('input', filterItems);
    searchInput.addEventListener('keyup', filterItems);
    
    // Additional event listener for iPhone 7 Safari
    if (isIOS && isSafari) {
      searchInput.addEventListener('search', filterItems);
    }
  }

  function initializePage() {
    setupCollapsibles();
    restoreScrollPosition();
    setupSearchFilter();
  }

  document.addEventListener('turbo:load', initializePage);
  document.addEventListener('turbo:render', () => {
    // reseta flag para o campo de busca reanexar no iOS
    const searchInput = document.getElementById('item-search-input');
    if (searchInput) searchInput.dataset.searchAttached = '';
    initializePage();
  });
  document.addEventListener('DOMContentLoaded', initializePage);

  // Salvar posição antes de submit
  document.addEventListener('submit', function(event) {
    const form = event.target;
    const row = form.closest('tr');
    if (row && row.id && typeof sessionStorage !== 'undefined') {
      sessionStorage.setItem('scroll-to-item-id', row.id);
    }
  }, true);

  // Fix para bug de teclado no iOS
  if (isIOS) {
    window.addEventListener('focusout', () => {
      setTimeout(() => { window.scrollTo(0, window.scrollY); }, 50);
    });
  }
})();

</script>